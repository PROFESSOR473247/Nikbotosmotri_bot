# -*- coding: utf-8 -*-
import logging
import asyncio
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler, CallbackQueryHandler,
    JobQueue
)
from config import BOT_TOKEN
from authorized_users import is_authorized, is_admin, get_user_role, get_user_access_level
from database import init_database, get_user_accessible_groups, load_groups, load_templates
from task_manager import task_manager
from group_manager import group_manager
from menu_manager import *
from conversation_handlers import add_user_conversation, create_template_conversation
import datetime
import pytz
from datetime import timedelta
import sys
import os
import requests
import threading
import time

# Initialize database on startup
init_database()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Authorization decorator
def authorization_required(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if not is_authorized(user_id):
            await update.message.reply_text(
                "‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ü–†–ê–í\n\n"
                "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É",
                reply_markup=get_unauthorized_keyboard()
            )
            print(f"Unauthorized access from user_id: {user_id} to function: {func.__name__}")
            return None
        return await func(update, context, *args, **kwargs)
    return wrapper

# Role-based access decorator
def role_required(required_role):
    def decorator(func):
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user_id = update.effective_user.id
            user_role = get_user_role(user_id)
            role_levels = {
                "admin": 4,
                "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å": 3,
                "–≤–æ–¥–∏—Ç–µ–ª—å": 2,
                "–≥–æ—Å—Ç—å": 1
            }
            user_level = role_levels.get(user_role, 1)
            required_level = role_levels.get(required_role, 1)
            
            if user_level < required_level:
                await update.message.reply_text(
                    f"‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ü–†–ê–í\n\n"
                    f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è {required_role} –∏ –≤—ã—à–µ",
                    reply_markup=get_main_menu(user_id)
                )
                return None
            return await func(update, context, *args, **kwargs)
        return wrapper
    return decorator

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # If bot is in group - update group information
    if update.effective_chat.type in ["group", "supergroup", "channel"]:
        await group_manager.update_group_info(update, context)
        return
    
    # Personal chat
    current_time = datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime("%H:%M:%S")

    if not is_authorized(user_id):
        welcome_text = (
            f'ü§ñ –ë–û–¢ –î–õ–Ø –û–¢–õ–û–ñ–ï–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô\n\n'
            f'–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö.\n\n'
            f'–í–∞—à ID: `{user_id}`\n'
            f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time} (–ú–æ—Å–∫–≤–∞)\n\n'
            f'‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ü–†–ê–í\n\n'
            f'–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ "üÜî –ü–æ–ª—É—á–∏—Ç—å ID" –∏ —Å–æ–æ–±—â–∏—Ç–µ –µ–≥–æ @ProfeSSor471. '
            f'–û–Ω –≤–Ω–µ—Å—ë—Ç –≤–∞—Å –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±—ä—è—Å–Ω–∏—Ç –¥–∞–ª—å–Ω–µ–π—à—É—é —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.\n\n'
            f'–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!'
        )

        await update.message.reply_text(
            welcome_text,
            reply_markup=get_unauthorized_keyboard(),
            parse_mode='Markdown'
        )
        return

    user_role = get_user_role(user_id)
    welcome_text = (
        f'ü§ñ –ë–û–¢ –î–õ–Ø –û–¢–õ–û–ñ–ï–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô\n'
        f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time} (–ú–æ—Å–∫–≤–∞)\n'
        f'–í–∞—à ID: {user_id}\n'
        f'–í–∞—à–∞ —Ä–æ–ª—å: {user_role}\n\n'
        f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!'
    )

    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_menu(user_id)
    )

@authorization_required
async def handle_templates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for Templates button"""
    user_id = update.effective_user.id
    user_role = get_user_role(user_id)
    
    # Check if user has permission to manage templates
    if user_role in ["–≥–æ—Å—Ç—å", "–≤–æ–¥–∏—Ç–µ–ª—å"]:
        await update.message.reply_text(
            "‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ü–†–ê–í\n\n"
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π",
            reply_markup=get_main_menu(user_id)
        )
        return
    
    await update.message.reply_text(
        "üìÅ –£–ü–†–ê–í–õ–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ê–ú–ò\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_templates_menu()
    )

@authorization_required 
async def handle_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for Tasks button"""
    user_id = update.effective_user.id
    
    accessible_groups = get_user_accessible_groups(user_id)
    if not accessible_groups:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–∞–º\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞",
            reply_markup=get_main_menu(user_id)
        )
        return
    
    await update.message.reply_text(
        "üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ê–ú–ò\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_tasks_menu()
    )

@authorization_required
@role_required("admin")
async def handle_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle users management - admin only"""
    await update.message.reply_text(
        "üë• –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_users_menu()
    )

@authorization_required
async def handle_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle groups management"""
    user_id = update.effective_user.id
    user_role = get_user_role(user_id)
    
    if user_role == "–≥–æ—Å—Ç—å":
        await update.message.reply_text(
            "‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ü–†–ê–í\n\n"
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π",
            reply_markup=get_main_menu(user_id)
        )
        return
    
    await update.message.reply_text(
        "üèòÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –ì–†–£–ü–ü–ê–ú–ò\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_groups_menu(user_id)
    )

@authorization_required
async def handle_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle more options"""
    user_id = update.effective_user.id
    await update.message.reply_text(
        "‚ÑπÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_more_menu()
    )

@authorization_required
async def handle_task_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show user task status"""
    user_id = update.effective_user.id
    user_tasks = task_manager.get_user_tasks(user_id)
    
    if not user_tasks:
        status_text = "üìä –°–¢–ê–¢–£–° –ó–ê–î–ê–ß\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"
    else:
        status_text = "üìä –í–ê–®–ò –ê–ö–¢–ò–í–ù–´–ï –ó–ê–î–ê–ß–ò:\n\n"
        for task_id, task_data in user_tasks.items():
            groups_data = load_groups()
            group_info = groups_data["groups"].get(str(task_data.get("group_id", "")), {})
            group_name = group_info.get('title', f'Group {task_data.get("group_id", "")}')
            
            templates_data = load_templates()
            template_name = task_data.get("template_name", "Unknown")
            template_text = templates_data.get("templates", {}).get(template_name, {}).get("text", "Template")[:50]
            
            status_text += f"üìù –®–∞–±–ª–æ–Ω: {template_text}...\n"
            status_text += f"   üèòÔ∏è –ì—Ä—É–ø–ø–∞: {group_name}\n"
            status_text += f"   üïí –°–æ–∑–¥–∞–Ω–∞: {task_data.get('created_at', '')[:16]}\n"
            status_text += f"   üîß –¢–∏–ø: {'–û—Å–Ω–æ–≤–Ω–∞—è' if task_data.get('task_type') == 'main' else '–¢–µ—Å—Ç–æ–≤–∞—è'}\n\n"
    
    await update.message.reply_text(
        status_text,
        reply_markup=get_main_menu(user_id)
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text messages"""
    text = update.message.text
    user_id = update.effective_user.id
    
    # Skip processing if it's a group
    if update.effective_chat.type in ["group", "supergroup", "channel"]:
        return
    
    # Main menu handlers
    if text == "üìã –ó–∞–¥–∞—á–∏":
        await handle_tasks(update, context)
    elif text == "üìÅ –®–∞–±–ª–æ–Ω—ã":
        await handle_templates(update, context)
    elif text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        await handle_users(update, context)
    elif text == "üèòÔ∏è –ì—Ä—É–ø–ø—ã":
        await handle_groups(update, context)
    elif text == "‚ÑπÔ∏è –ï—â–µ":
        await handle_more(update, context)
    elif text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_menu(user_id)
        )
    elif text == "üÜî –ü–æ–ª—É—á–∏—Ç—å ID":
        await my_id(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á":
        await handle_task_status(update, context)
    elif text == "üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è":
        await now(update, context)
    elif text == "üÜî –ú–æ–π ID":
        await my_id(update, context)
    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
            reply_markup=get_main_menu(user_id) if is_authorized(user_id) else get_unauthorized_keyboard()
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show help - available to everyone"""
    user_id = update.effective_user.id

    help_text = """
ü§ñ –°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú –ë–û–¢–ê:

–î–û–°–¢–£–ü–ù–û –í–°–ï–ú:
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/my_id - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à ID (–¥–ª—è –¥–æ—Å—Ç—É–ø–∞)
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–¢–û–õ–¨–ö–û –î–õ–Ø –ê–í–¢–û–†–ò–ó–û–í–ê–ù–ù–´–•:
üìã –ó–∞–¥–∞—á–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
üìÅ –®–∞–±–ª–æ–Ω—ã - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ (–∞–¥–º–∏–Ω—ã/—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏)
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
üèòÔ∏è –ì—Ä—É–ø–ø—ã - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ (–∞–¥–º–∏–Ω—ã/—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏)
‚ÑπÔ∏è –ï—â–µ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
"""

    if is_authorized(user_id):
        await update.message.reply_text(help_text, reply_markup=get_main_menu(user_id))
    else:
        await update.message.reply_text(help_text, reply_markup=get_unauthorized_keyboard())

async def my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show user_id - available to everyone"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if is_authorized(user_id):
        reply_markup = get_main_menu(user_id)
        additional_text = "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∏ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞"
    else:
        reply_markup = get_unauthorized_keyboard()
        additional_text = "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞"

    await update.message.reply_text(
        f'üÜî –í–∞—à ID: `{user_id}`\n'
        f'üí¨ ID —á–∞—Ç–∞: `{chat_id}`\n\n'
        f'{additional_text}',
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show current time"""
    current_time = datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime("%H:%M:%S")
    user_id = update.effective_user.id
    await update.message.reply_text(
        f'üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time} (–ú–æ—Å–∫–≤–∞)',
        reply_markup=get_main_menu(user_id)
    )

# Keep alive function for Render
def keep_alive():
    """Periodically ping to keep app awake"""
    def ping():
        while True:
            try:
                render_url = os.environ.get('RENDER_EXTERNAL_URL')
                if render_url:
                    response = requests.get(render_url, timeout=10)
                    print(f"Ping sent: {response.status_code}")
                else:
                    print("Keep-alive: bot active")
            except Exception as e:
                print(f"Ping error: {e}")
            time.sleep(300)  # Ping every 5 minutes
    
    ping_thread = threading.Thread(target=ping, daemon=True)
    ping_thread.start()
    print("Keep-alive system started")

def main():
    """Start bot"""
    print("Starting bot...")
    
    # Initialize database
    init_database()

    # Start keep-alive system
    keep_alive()

    # Create application
    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .job_queue(JobQueue())
        .build()
    )

    # Restore tasks on startup
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    
    loop.run_until_complete(task_manager.restore_tasks(application))

    # Command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("my_id", my_id))
    application.add_handler(CommandHandler("now", now))

    # Conversation handlers
    application.add_handler(add_user_conversation)
    application.add_handler(create_template_conversation)

    # Main menu button handlers
    application.add_handler(MessageHandler(filters.Regex("^üìã –ó–∞–¥–∞—á–∏$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üìÅ –®–∞–±–ª–æ–Ω—ã$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üèòÔ∏è –ì—Ä—É–ø–ø—ã$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^‚ÑπÔ∏è –ï—â–µ$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üÜî –ü–æ–ª—É—á–∏—Ç—å ID$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^‚ùì –ü–æ–º–æ—â—å$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üÜî –ú–æ–π ID$"), handle_text))

    # Handler for all text messages
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # Handler for updating group information
    application.add_handler(MessageHandler(filters.ALL, group_manager.update_group_info))

    print("Bot started and ready!")
    
    # Start polling
    application.run_polling()

if __name__ == '__main__':
    main()
