import logging
import asyncio
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, 
    ContextTypes, ConversationHandler, CallbackQueryHandler,
    JobQueue  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û –ó–î–ï–°–¨
)
from config import BOT_TOKEN
from authorized_users import is_authorized, is_admin, add_user, remove_user, get_users_list, get_admin_id
import datetime
import pytz
from datetime import timedelta
import sys
import os

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å templates
if 'templates' in sys.modules:
    del sys.modules['templates']

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
TEMPLATES = {}
try:
    from templates import TEMPLATES as IMPORTED_TEMPLATES
    TEMPLATES = IMPORTED_TEMPLATES

    print("‚úÖ –®–∞–±–ª–æ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
    required_templates = ['hongqi_template1', 'hongqi_template2', 'turbomatiz_template1', 'turbomatiz_template2',
                          'turbomatiz_template3']
    missing_templates = []

    for template in required_templates:
        if template not in TEMPLATES:
            missing_templates.append(template)

    if missing_templates:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —à–∞–±–ª–æ–Ω—ã: {missing_templates}")
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª templates.py")
        exit(1)

    print(f"üîß –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã: {list(TEMPLATES.keys())}")

except ImportError as import_error:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {import_error}")
    print("‚ùå –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª templates.py —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏!")
    exit(1)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
active_jobs = {}
test_jobs = {}


async def send_template_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, template_name: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    current_time = datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime("%H:%M:%S")
    print(f"üì® [{current_time}] –û—Ç–ø—Ä–∞–≤–∫–∞ {template_name} –≤ —á–∞—Ç {chat_id}")

    try:
        # –î–ª—è turbomatiz_template3 –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏ (—Ä–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏)
        if template_name == 'turbomatiz_template3':
            week_number = datetime.datetime.now().isocalendar()[1]
            if week_number % 2 != 0:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —á–µ—Ç–Ω—ã–º –Ω–µ–¥–µ–ª—è–º
                print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ {template_name} (–Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è)")
                return

        template_data = TEMPLATES[template_name]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if isinstance(template_data, dict):
            text = template_data["text"]
            image_path = template_data.get("image")
        else:
            # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω - –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞
            text = template_data
            image_path = None

        print(f"üîç –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {text[:100]}...")
        print(f"üîç –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {image_path}")

        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É—Ç—è—Ö
        if image_path:
            absolute_path = os.path.abspath(image_path)
            print(f"üîç –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {absolute_path}")
            print(f"üîç –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(absolute_path)}")
            if os.path.exists(absolute_path):
                print(f"üîç –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(absolute_path)} –±–∞–π—Ç")

        if image_path and os.path.exists(image_path):
            print(f"üñºÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {image_path}")
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
                with open(image_path, 'rb') as photo:
                    await context.bot.send_photo(
                        chat_id=chat_id,
                        photo=photo,
                        caption=text
                    )
                print(f"‚úÖ [{current_time}] {template_name} —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
            except Exception as img_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_error}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
                await context.bot.send_message(chat_id, text=text)
                print(f"‚úÖ [{current_time}] {template_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id} (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)")
        else:
            if image_path:
                print(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await context.bot.send_message(chat_id, text=text)
            print(f"‚úÖ [{current_time}] {template_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id} (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)")

    except Exception as send_error:
        print(f"‚ùå [{current_time}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {template_name}: {send_error}")


async def send_test_template_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, template_name: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    current_time = datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime("%H:%M:%S")
    print(f"üß™ [{current_time}] –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ {template_name} –≤ —á–∞—Ç {chat_id}")

    try:
        template_data = TEMPLATES[template_name]

        if isinstance(template_data, dict):
            text = template_data["text"]
            image_path = template_data.get("image")
        else:
            text = template_data
            image_path = None

        print(f"üîç –¢–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {text[:100]}...")
        print(f"üîç –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {image_path}")

        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É—Ç—è—Ö
        if image_path:
            absolute_path = os.path.abspath(image_path)
            print(f"üîç –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {absolute_path}")
            print(f"üîç –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(absolute_path)}")
            if os.path.exists(absolute_path):
                print(f"üîç –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(absolute_path)} –±–∞–π—Ç")

        if image_path and os.path.exists(image_path):
            print(f"üñºÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {image_path}")
            try:
                with open(image_path, 'rb') as photo:
                    await context.bot.send_photo(
                        chat_id=chat_id,
                        photo=photo,
                        caption=text
                    )
                print(f"‚úÖ [{current_time}] –¢–µ—Å—Ç {template_name} —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
            except Exception as img_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_error}")
                await context.bot.send_message(chat_id, text=text)
                print(f"‚úÖ [{current_time}] –¢–µ—Å—Ç {template_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id} (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)")
        else:
            if image_path:
                print(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
            await context.bot.send_message(chat_id, text=text)
            print(f"‚úÖ [{current_time}] –¢–µ—Å—Ç {template_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id} (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)")

        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if chat_id in test_jobs and template_name in test_jobs[chat_id]:
            del test_jobs[chat_id][template_name]

    except Exception as test_error:
        print(f"‚ùå [{current_time}] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ {template_name}: {test_error}")


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADD_USER_ID, ADD_USER_NAME = range(2)


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def authorization_required(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if not is_authorized(user_id):
            await update.message.reply_text(
                "‚ùå –£ –í–ê–° –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ü–†–ê–í\n\n"
                "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                reply_markup=get_unauthorized_keyboard()
            )
            print(f"üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç user_id: {user_id} –∫ —Ñ—É–Ω–∫—Ü–∏–∏: {func.__name__}")
            return None
        return await func(update, context, *args, **kwargs)

    return wrapper


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_required(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if not is_admin(user_id):
            await update.message.reply_text(
                "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                reply_markup=get_main_keyboard()
            )
            print(f"üö´ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç user_id: {user_id}")
            return None
        return await func(update, context, *args, **kwargs)

    return wrapper


def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    keyboard = [
        ["üìã –®–∞–±–ª–æ–Ω—ã"],
        ["üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"],
        ["‚öôÔ∏è –ï–©–ï"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª...")


def get_unauthorized_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    keyboard = [
        ["üÜî –ü–æ–ª—É—á–∏—Ç—å ID"],
        ["üìã –°–ø—Ä–∞–≤–∫–∞"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                               input_field_placeholder="–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")


def get_templates_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞"""
    keyboard = [
        ["üöó –û—Å–º–æ—Ç—Ä—ã Hongqi", "üöô –û—Å–º–æ—Ç—Ä—ã TurboMatiz"],
        ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_hongqi_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é Hongqi"""
    keyboard = [
        ["üîç –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–π –æ—Å–º–æ—Ç—Ä –ù5", "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Å–º–æ—Ç—Ä–∞ –ù5"],
        ["üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã Hongqi"],
        ["üîô –ö –≤—ã–±–æ—Ä—É –±—Ä–µ–Ω–¥–∞", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_turbomatiz_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é TurboMatiz"""
    keyboard = [
        ["üí≥ –û–ø–ª–∞—Ç–∞", "üîç –û—Å–º–æ—Ç—Ä"],
        ["üßº –ß–∏—Å—Ç—ã–π –∫—É–∑–æ–≤"],
        ["üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã TurboMatiz"],
        ["üîô –ö –≤—ã–±–æ—Ä—É –±—Ä–µ–Ω–¥–∞", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_testing_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keyboard = [
        ["üöó –¢–µ—Å—Ç Hongqi", "üöô –¢–µ—Å—Ç TurboMatiz"],
        ["üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"],
        ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_test_hongqi_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Hongqi"""
    keyboard = [
        ["üîç –¢–µ—Å—Ç –æ—Å–º–æ—Ç—Ä –ù5", "‚è∞ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ù5"],
        ["üîô –ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_test_turbomatiz_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TurboMatiz"""
    keyboard = [
        ["üí≥ –¢–µ—Å—Ç –æ–ø–ª–∞—Ç–∞", "üîç –¢–µ—Å—Ç –æ—Å–º–æ—Ç—Ä"],
        ["üßº –¢–µ—Å—Ç —á–∏—Å—Ç—ã–π –∫—É–∑–æ–≤"],
        ["üîô –ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_more_keyboard(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    keyboard = [
        ["üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥", "üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"],
        ["üÜî –ú–æ–π ID"]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if is_admin(user_id):
        keyboard.append(["üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"])

    keyboard.append(["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])

    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_user_management_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    keyboard = [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"],
        ["üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
        ["üîô –ù–∞–∑–∞–¥ –∫ –ï–©–ï"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_remove_user_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = get_users_list()
    admin_id = get_admin_id()

    keyboard = []
    for user_id_str, username in users.items():
        user_id = int(user_id_str)
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_id == admin_id:
            continue
        keyboard.append([f"‚ùå {username} (ID: {user_id})"])

    keyboard.append(["üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_confirmation_keyboard(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_remove_{user_id}"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_remove")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_back_to_management_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    keyboard = [["üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é"]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def moscow_to_utc(time_str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤ UTC"""
    try:
        hours, minutes = map(int, time_str.split(':'))
        moscow_tz = pytz.timezone('Europe/Moscow')
        now = datetime.datetime.now(moscow_tz)
        moscow_time = moscow_tz.localize(datetime.datetime(now.year, now.month, now.day, hours, minutes))
        utc_time = moscow_time.astimezone(pytz.utc)
        return utc_time.time()
    except Exception as time_error:
        raise ValueError(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {time_error}")


def format_time_delta(delta):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if delta.total_seconds() < 0:
        return "—É–∂–µ –ø—Ä–æ—à–ª–æ"

    days = delta.days
    hours, remainder = divmod(delta.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)

    parts = []
    if days > 0:
        parts.append(f"{days} –¥–Ω")
    if hours > 0:
        parts.append(f"{hours} —á–∞—Å")
    if minutes > 0:
        parts.append(f"{minutes} –º–∏–Ω")
    if seconds > 0 and days == 0 and hours == 0:
        parts.append(f"{seconds} —Å–µ–∫")

    return " ".join(parts) if parts else "–º–µ–Ω–µ–µ —Å–µ–∫—É–Ω–¥—ã"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    current_time = datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime("%H:%M:%S")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not is_authorized(user_id):
        welcome_text = (
            f'ü§ñ –ë–û–¢ –° –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–´–ú –ú–ï–ù–Æ\n'
            f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time} (–ú–°–ö)\n'
            f'ID —á–∞—Ç–∞: {chat_id}\n'
            f'–í–∞—à ID: {user_id}\n\n'
            '‚ùå –£ –í–ê–° –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ü–†–ê–í\n\n'
            '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n\n'
            'üéπ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n'
            '‚Ä¢ üÜî –ü–æ–ª—É—á–∏—Ç—å ID - —É–∑–Ω–∞—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä\n'
            '‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º'
        )

        await update.message.reply_text(
            welcome_text,
            reply_markup=get_unauthorized_keyboard()
        )
        print(f"üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç user_id: {user_id}")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é
    welcome_text = (
        f'ü§ñ –ë–û–¢ –° –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–´–ú –ú–ï–ù–Æ\n'
        f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time} (–ú–°–ö)\n'
        f'ID —á–∞—Ç–∞: {chat_id}\n'
        f'–í–∞—à ID: {user_id}\n\n'
        'üéπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!\n\n'
        'üí° –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n'
        '/update_menu - –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é\n'
        '/my_id - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à ID'
    )

    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_keyboard()
    )
    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ —á–∞—Ç {chat_id} –¥–ª—è user_id: {user_id}")


@authorization_required
async def update_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    print(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è —á–∞—Ç–∞ {chat_id}, user_id: {user_id}")

    await update.message.reply_text(
        "üîÑ –£–¥–∞–ª—è—é —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é...",
        reply_markup=ReplyKeyboardRemove()
    )

    await asyncio.sleep(1)

    await update.message.reply_text(
        "‚úÖ –ù–æ–≤–æ–µ –º–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
        "üéπ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å:\n"
        "‚Ä¢ üìã –®–∞–±–ª–æ–Ω—ã - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏\n"
        "‚Ä¢ üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
        "‚Ä¢ ‚öôÔ∏è –ï–©–ï - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
        reply_markup=get_main_keyboard()
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º - –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º"""
    user_id = update.effective_user.id

    help_text = """
ü§ñ –°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú:

üéπ –î–û–°–¢–£–ü–ù–´–ï –í–°–ï–ú:
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/my_id - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à ID (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞)
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üéπ –¢–û–õ–¨–ö–û –î–õ–Ø –ê–í–¢–û–†–ò–ó–û–í–ê–ù–ù–´–•:
üìã –®–∞–±–ª–æ–Ω—ã - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
‚öôÔ∏è –ï–©–ï - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
/update_menu - –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é
/status - —Å—Ç–∞—Ç—É—Å —à–∞–±–ª–æ–Ω–æ–≤
/now - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

üîê –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
"""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    if is_authorized(user_id):
        await update.message.reply_text(help_text, reply_markup=get_main_keyboard())
    else:
        await update.message.reply_text(help_text, reply_markup=get_unauthorized_keyboard())


@authorization_required
async def now(update: Update, _: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
    current_time = datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime("%H:%M:%S")
    await update.message.reply_text(
        f'üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time} (–ú–°–ö)',
        reply_markup=get_main_keyboard()
    )


# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ë–ï–ó –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ @authorization_required
async def my_id(update: Update, _: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if is_authorized(user_id):
        reply_markup = get_main_keyboard()
        additional_text = "‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∏ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞"
    else:
        reply_markup = get_unauthorized_keyboard()
        additional_text = "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞"

    await update.message.reply_text(
        f'üÜî –í–∞—à ID: `{user_id}`\n'
        f'üí¨ ID —á–∞—Ç–∞: `{chat_id}`\n\n'
        f'{additional_text}',
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    print(f"üìã –ü–æ–∫–∞–∑–∞–Ω ID –¥–ª—è user_id: {user_id}")


@authorization_required
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    current_time = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
    status_text = "üìä –°–¢–ê–¢–£–° –ê–ö–¢–ò–í–ù–´–• –®–ê–ë–õ–û–ù–û–í:\n\n"

    # –û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    status_text += "üîπ –û–°–ù–û–í–ù–´–ï –®–ê–ë–õ–û–ù–´:\n"
    if chat_id in active_jobs:
        template_names = {
            'hongqi_template1': 'üöó –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–π –æ—Å–º–æ—Ç—Ä –ù5 (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 16:00)',
            'hongqi_template2': '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Å–º–æ—Ç—Ä–∞ –ù5 (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 07:00)',
            'turbomatiz_template1': 'üí≥ –û–ø–ª–∞—Ç–∞ TurboMatiz (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 16:00)',
            'turbomatiz_template2': 'üîç –û—Å–º–æ—Ç—Ä TurboMatiz (–≤—Ç–æ—Ä–Ω–∏–∫/–ø—è—Ç–Ω–∏—Ü–∞ 16:00)',
            'turbomatiz_template3': 'üßº –ß–∏—Å—Ç—ã–π –∫—É–∑–æ–≤ TurboMatiz (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 15:00, —Ä–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏)'
        }

        for template_name, job in active_jobs[chat_id].items():
            next_run = job.next_run_time
            if next_run:
                next_run_moscow = next_run.astimezone(pytz.timezone('Europe/Moscow'))
                time_left = next_run_moscow - current_time
                display_name = template_names.get(template_name, template_name)
                status_text += f"‚úÖ {display_name}\n   üìÖ –°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {next_run_moscow.strftime('%d.%m.%Y %H:%M')}\n   ‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {format_time_delta(time_left)}\n\n"
            else:
                display_name = template_names.get(template_name, template_name)
                status_text += f"‚úÖ {display_name}: –ê–ö–¢–ò–í–ï–ù (–≤—Ä–µ–º—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)\n\n"
    else:
        status_text += "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤\n\n"

    # –¢–µ—Å—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
    status_text += "üîπ –¢–ï–°–¢–û–í–´–ï –û–¢–ü–†–ê–í–ö–ò:\n"
    if chat_id in test_jobs:
        for template_name, job in test_jobs[chat_id].items():
            next_run = job.next_run_time
            if next_run:
                next_run_moscow = next_run.astimezone(pytz.timezone('Europe/Moscow'))
                time_left = next_run_moscow - current_time
                status_text += f"üß™ –¢–µ—Å—Ç {template_name}: –ê–ö–¢–ò–í–ï–ù\n   üìÖ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {next_run_moscow.strftime('%d.%m.%Y %H:%M:%S')}\n   ‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {format_time_delta(time_left)}\n\n"
            else:
                status_text += f"üß™ –¢–µ—Å—Ç {template_name}: –ê–ö–¢–ò–í–ï–ù (–≤—Ä–µ–º—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)\n\n"
    else:
        status_text += "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤\n"

    await update.message.reply_text(status_text, reply_markup=get_main_keyboard())


# –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@admin_required
async def user_management(update: Update, _: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    await update.message.reply_text(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_user_management_keyboard()
    )


@admin_required
async def add_user_start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await update.message.reply_text(
        "‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø\n\n"
        "–®–∞–≥ 1 –∏–∑ 2:\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        reply_markup=ReplyKeyboardRemove()
    )
    return ADD_USER_ID


@admin_required
async def add_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id_text = update.message.text.strip()

    try:
        user_id = int(user_id_text)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['add_user_id'] = user_id
        
        await update.message.reply_text(
            "–®–∞–≥ 2 –∏–∑ 2:\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ):\n\n"
            "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
        )
        return ADD_USER_NAME
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:"
        )
        return ADD_USER_ID


@admin_required
async def add_user_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    username = update.message.text.strip()
    user_id = context.user_data.get('add_user_id')

    if not user_id:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=get_user_management_keyboard()
        )
        return ConversationHandler.END

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success, message = add_user(user_id, username)

    if success:
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\nüë§ {username}\nüÜî {user_id}",
            reply_markup=get_user_management_keyboard()
        )
    else:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {message}",
            reply_markup=get_user_management_keyboard()
        )

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    return ConversationHandler.END


@admin_required
async def remove_user_start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users = get_users_list()
    admin_id = get_admin_id()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    removable_users = [uid for uid in users.keys() if int(uid) != admin_id]

    if not removable_users:
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=get_user_management_keyboard()
        )
        return

    await update.message.reply_text(
        "‚ûñ –£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_remove_user_keyboard()
    )


@admin_required
async def remove_user_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    text = update.message.text
    user_id = None

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    try:
        if "ID:" in text:
            user_id = int(text.split("ID:")[1].split(")")[0].strip())
    except (ValueError, IndexError):
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞",
            reply_markup=get_user_management_keyboard()
        )
        return

    if user_id:
        users = get_users_list()
        username = users.get(str(user_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        context.user_data['remove_user_id'] = user_id
        context.user_data['remove_username'] = username

        await update.message.reply_text(
            f"‚ö†Ô∏è –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"üë§ {username}\n"
            f"üÜî {user_id}\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=get_confirmation_keyboard(user_id)
        )


async def remove_user_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    if query.data.startswith("confirm_remove_"):
        user_id = int(query.data.split("_")[2])

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success, message = remove_user(user_id)

        if success:
            await query.edit_message_text(
                f"‚úÖ {message}",
                reply_markup=None
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_user_management_keyboard()
            )
        else:
            await query.edit_message_text(
                f"‚ùå {message}",
                reply_markup=None
            )
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_user_management_keyboard()
            )

    elif query.data == "cancel_remove":
        await query.edit_message_text(
            "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=None
        )
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_user_management_keyboard()
        )


@admin_required
async def list_users(update: Update, _: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = get_users_list()
    admin_id = get_admin_id()

    if not users:
        users_list_text = "‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    else:
        users_list_text = "üìã –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:\n\n"
        for user_id_str, username in users.items():
            user_id = int(user_id_str)
            role = "üëë –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†" if user_id == admin_id else "üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨"
            users_list_text += f"{role}\nüë§ {username}\nüÜî {user_id}\n\n"

    await update.message.reply_text(
        users_list_text,
        reply_markup=get_back_to_management_keyboard()
    )


async def cancel(update: Update, _: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    user_id = update.effective_user.id
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_user_management_keyboard() if is_admin(user_id) else get_main_keyboard()
    )
    return ConversationHandler.END


# Hongqi —à–∞–±–ª–æ–Ω—ã
@authorization_required
async def start_hongqi_template1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Hongqi —à–∞–±–ª–æ–Ω 1: –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 16:00 –ú–°–ö"""
    chat_id = update.effective_chat.id
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Hongqi —à–∞–±–ª–æ–Ω–∞ 1 –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if chat_id in active_jobs and 'hongqi_template1' in active_jobs[chat_id]:
        active_jobs[chat_id]['hongqi_template1'].schedule_removal()

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è: –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 16:00 –ú–°–ö -> UTC
    utc_time = moscow_to_utc("16:00")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = 6)
    job = context.job_queue.run_daily(
        lambda ctx: send_template_message(ctx, chat_id, "hongqi_template1"),
        time=utc_time,
        days=(6,),  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        chat_id=chat_id,
        name=f"hongqi_template1_{chat_id}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    if chat_id not in active_jobs:
        active_jobs[chat_id] = {}
    active_jobs[chat_id]['hongqi_template1'] = job

    print(f"‚úÖ Hongqi —à–∞–±–ª–æ–Ω 1 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    await update.message.reply_text(
        f'‚úÖ –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–π –æ—Å–º–æ—Ç—Ä –ù5 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n'
        f'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ\n'
        f'‚è∞ –í—Ä–µ–º—è: 16:00 (–ú–°–ö)\n'
        f'‚úâÔ∏è –¢–µ–∫—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è Hongqi',
        reply_markup=get_hongqi_keyboard()
    )


@authorization_required
async def start_hongqi_template2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Hongqi —à–∞–±–ª–æ–Ω 2: –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 07:00 –ú–°–ö"""
    chat_id = update.effective_chat.id
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Hongqi —à–∞–±–ª–æ–Ω–∞ 2 –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if chat_id in active_jobs and 'hongqi_template2' in active_jobs[chat_id]:
        active_jobs[chat_id]['hongqi_template2'].schedule_removal()

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 07:00 –ú–°–ö -> UTC
    utc_time = moscow_to_utc("07:00")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0)
    job = context.job_queue.run_daily(
        lambda ctx: send_template_message(ctx, chat_id, "hongqi_template2"),
        time=utc_time,
        days=(0,),  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        chat_id=chat_id,
        name=f"hongqi_template2_{chat_id}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    if chat_id not in active_jobs:
        active_jobs[chat_id] = {}
    active_jobs[chat_id]['hongqi_template2'] = job

    print(f"‚úÖ Hongqi —à–∞–±–ª–æ–Ω 2 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    await update.message.reply_text(
        f'‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Å–º–æ—Ç—Ä–∞ –ù5 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!\n'
        f'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n'
        f'‚è∞ –í—Ä–µ–º—è: 07:00 (–ú–°–ö)\n'
        f'‚úâÔ∏è –¢–µ–∫—Å—Ç: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Å–º–æ—Ç—Ä–µ',
        reply_markup=get_hongqi_keyboard()
    )


@authorization_required
async def stop_hongqi_templates(update: Update, _: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ Hongqi —à–∞–±–ª–æ–Ω—ã"""
    chat_id = update.effective_chat.id
    print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö Hongqi —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    stopped_count = 0

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Hongqi —à–∞–±–ª–æ–Ω—ã
    if chat_id in active_jobs:
        for template_name in ['hongqi_template1', 'hongqi_template2']:
            if template_name in active_jobs[chat_id]:
                active_jobs[chat_id][template_name].schedule_removal()
                stopped_count += 1
                del active_jobs[chat_id][template_name]

    await update.message.reply_text(
        f'‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ Hongqi —à–∞–±–ª–æ–Ω–æ–≤: {stopped_count}',
        reply_markup=get_hongqi_keyboard()
    )


# TurboMatiz —à–∞–±–ª–æ–Ω—ã
@authorization_required
async def start_turbomatiz_template1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç TurboMatiz —à–∞–±–ª–æ–Ω 1: –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 16:00 –ú–°–ö"""
    chat_id = update.effective_chat.id
    print(f"üöÄ –ó–∞–ø—É—Å–∫ TurboMatiz —à–∞–±–ª–æ–Ω–∞ 1 –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if chat_id in active_jobs and 'turbomatiz_template1' in active_jobs[chat_id]:
        active_jobs[chat_id]['turbomatiz_template1'].schedule_removal()

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è: –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 16:00 –ú–°–ö -> UTC
    utc_time = moscow_to_utc("16:00")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = 6)
    job = context.job_queue.run_daily(
        lambda ctx: send_template_message(ctx, chat_id, "turbomatiz_template1"),
        time=utc_time,
        days=(6,),  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        chat_id=chat_id,
        name=f"turbomatiz_template1_{chat_id}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    if chat_id not in active_jobs:
        active_jobs[chat_id] = {}
    active_jobs[chat_id]['turbomatiz_template1'] = job

    print(f"‚úÖ TurboMatiz —à–∞–±–ª–æ–Ω 1 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    await update.message.reply_text(
        f'‚úÖ –û–ø–ª–∞—Ç–∞ TurboMatiz –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n'
        f'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ\n'
        f'‚è∞ –í—Ä–µ–º—è: 16:00 (–ú–°–ö)\n'
        f'‚úâÔ∏è –¢–µ–∫—Å—Ç: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ',
        reply_markup=get_turbomatiz_keyboard()
    )


@authorization_required
async def start_turbomatiz_template2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç TurboMatiz —à–∞–±–ª–æ–Ω 2: –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ –∏ –ø—è—Ç–Ω–∏—Ü—É –≤ 16:00 –ú–°–ö"""
    chat_id = update.effective_chat.id
    print(f"üöÄ –ó–∞–ø—É—Å–∫ TurboMatiz —à–∞–±–ª–æ–Ω–∞ 2 –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if chat_id in active_jobs and 'turbomatiz_template2' in active_jobs[chat_id]:
        active_jobs[chat_id]['turbomatiz_template2'].schedule_removal()

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è: 16:00 –ú–°–ö -> UTC
    utc_time = moscow_to_utc("16:00")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ (–≤—Ç–æ—Ä–Ω–∏–∫=1, –ø—è—Ç–Ω–∏—Ü–∞=4)
    job = context.job_queue.run_daily(
        lambda ctx: send_template_message(ctx, chat_id, "turbomatiz_template2"),
        time=utc_time,
        days=(1, 4),  # –í—Ç–æ—Ä–Ω–∏–∫ –∏ –ø—è—Ç–Ω–∏—Ü–∞
        chat_id=chat_id,
        name=f"turbomatiz_template2_{chat_id}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    if chat_id not in active_jobs:
        active_jobs[chat_id] = {}
    active_jobs[chat_id]['turbomatiz_template2'] = job

    print(f"‚úÖ TurboMatiz —à–∞–±–ª–æ–Ω 2 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    await update.message.reply_text(
        f'‚úÖ –û—Å–º–æ—Ç—Ä TurboMatiz –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n'
        f'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ –∏ –ø—è—Ç–Ω–∏—Ü—É\n'
        f'‚è∞ –í—Ä–µ–º—è: 16:00 (–ú–°–ö)\n'
        f'‚úâÔ∏è –¢–µ–∫—Å—Ç: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Å–º–æ—Ç—Ä–µ',
        reply_markup=get_turbomatiz_keyboard()
    )


@authorization_required
async def start_turbomatiz_template3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç TurboMatiz —à–∞–±–ª–æ–Ω 3: –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 15:00 –ú–°–ö"""
    chat_id = update.effective_chat.id
    print(f"üöÄ –ó–∞–ø—É—Å–∫ TurboMatiz —à–∞–±–ª–æ–Ω–∞ 3 –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if chat_id in active_jobs and 'turbomatiz_template3' in active_jobs[chat_id]:
        active_jobs[chat_id]['turbomatiz_template3'].schedule_removal()

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 15:00 –ú–°–ö -> UTC
    utc_time = moscow_to_utc("15:00")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0)
    job = context.job_queue.run_daily(
        lambda ctx: send_template_message(ctx, chat_id, "turbomatiz_template3"),
        time=utc_time,
        days=(0,),  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        chat_id=chat_id,
        name=f"turbomatiz_template3_{chat_id}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    if chat_id not in active_jobs:
        active_jobs[chat_id] = {}
    active_jobs[chat_id]['turbomatiz_template3'] = job

    print(f"‚úÖ TurboMatiz —à–∞–±–ª–æ–Ω 3 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    await update.message.reply_text(
        f'‚úÖ –ß–∏—Å—Ç—ã–π –∫—É–∑–æ–≤ TurboMatiz –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n'
        f'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n'
        f'‚è∞ –í—Ä–µ–º—è: 15:00 (–ú–°–ö)\n'
        f'‚úâÔ∏è –¢–µ–∫—Å—Ç: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–æ–π–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è',
        reply_markup=get_turbomatiz_keyboard()
    )


@authorization_required
async def stop_turbomatiz_templates(update: Update, _: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ TurboMatiz —à–∞–±–ª–æ–Ω—ã"""
    chat_id = update.effective_chat.id
    print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö TurboMatiz —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    stopped_count = 0

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TurboMatiz —à–∞–±–ª–æ–Ω—ã
    if chat_id in active_jobs:
        for template_name in ['turbomatiz_template1', 'turbomatiz_template2', 'turbomatiz_template3']:
            if template_name in active_jobs[chat_id]:
                active_jobs[chat_id][template_name].schedule_removal()
                stopped_count += 1
                del active_jobs[chat_id][template_name]

    await update.message.reply_text(
        f'‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ TurboMatiz —à–∞–±–ª–æ–Ω–æ–≤: {stopped_count}',
        reply_markup=get_turbomatiz_keyboard()
    )


@authorization_required
async def stop_all(update: Update, _: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã"""
    chat_id = update.effective_chat.id
    print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    stopped_count = 0

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    if chat_id in active_jobs:
        for template_name, job in active_jobs[chat_id].items():
            job.schedule_removal()
            stopped_count += 1
        active_jobs[chat_id] = {}

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
    if chat_id in test_jobs:
        for template_name, job in test_jobs[chat_id].items():
            job.schedule_removal()
            stopped_count += 1
        test_jobs[chat_id] = {}

    await update.message.reply_text(
        f'‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {stopped_count}',
        reply_markup=get_main_keyboard()
    )


@authorization_required
async def cancel_tests(update: Update, _: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    chat_id = update.effective_chat.id
    print(f"üõë –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    stopped_count = 0
    if chat_id in test_jobs:
        for template_name, job in test_jobs[chat_id].items():
            job.schedule_removal()
            stopped_count += 1
        test_jobs[chat_id] = {}

    await update.message.reply_text(
        f'‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {stopped_count}',
        reply_markup=get_testing_keyboard()
    )


# –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Hongqi
@authorization_required
async def test_hongqi_template1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Hongqi —à–∞–±–ª–æ–Ω 1 (–æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥)"""
    chat_id = update.effective_chat.id
    print(f"üß™ –¢–µ—Å—Ç Hongqi —à–∞–±–ª–æ–Ω–∞ 1 –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
    job = context.job_queue.run_once(
        lambda ctx: send_test_template_message(ctx, chat_id, "hongqi_template1"),
        when=10,
        chat_id=chat_id,
        name=f"test_hongqi_template1_{chat_id}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    if chat_id not in test_jobs:
        test_jobs[chat_id] = {}
    test_jobs[chat_id]['hongqi_template1'] = job

    current_time = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
    send_time = current_time + timedelta(seconds=10)

    await update.message.reply_text(
        f'‚úÖ –¢–µ—Å—Ç "–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–π –æ—Å–º–æ—Ç—Ä –ù5" –∑–∞–ø—É—â–µ–Ω!\n'
        f'üìÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤: {send_time.strftime("%H:%M:%S")}\n'
        f'‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: 10 —Å–µ–∫—É–Ω–¥',
        reply_markup=get_test_hongqi_keyboard()
    )


@authorization_required
async def test_hongqi_template2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Hongqi —à–∞–±–ª–æ–Ω 2 (–æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥)"""
    chat_id = update.effective_chat.id
    print(f"üß™ –¢–µ—Å—Ç Hongqi —à–∞–±–ª–æ–Ω–∞ 2 –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
    job = context.job_queue.run_once(
        lambda ctx: send_test_template_message(ctx, chat_id, "hongqi_template2"),
        when=10,
        chat_id=chat_id,
        name=f"test_hongqi_template2_{chat_id}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    if chat_id not in test_jobs:
        test_jobs[chat_id] = {}
    test_jobs[chat_id]['hongqi_template2'] = job

    current_time = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
    send_time = current_time + timedelta(seconds=10)

    await update.message.reply_text(
        f'‚úÖ –¢–µ—Å—Ç "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Å–º–æ—Ç—Ä–∞ –ù5" –∑–∞–ø—É—â–µ–Ω!\n'
        f'üìÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤: {send_time.strftime("%H:%M:%S")}\n'
        f'‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: 10 —Å–µ–∫—É–Ω–¥',
        reply_markup=get_test_hongqi_keyboard()
    )


# –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è TurboMatiz
@authorization_required
async def test_turbomatiz_template1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç TurboMatiz —à–∞–±–ª–æ–Ω 1 (–æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥)"""
    chat_id = update.effective_chat.id
    print(f"üß™ –¢–µ—Å—Ç TurboMatiz —à–∞–±–ª–æ–Ω–∞ 1 –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
    job = context.job_queue.run_once(
        lambda ctx: send_test_template_message(ctx, chat_id, "turbomatiz_template1"),
        when=10,
        chat_id=chat_id,
        name=f"test_turbomatiz_template1_{chat_id}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    if chat_id not in test_jobs:
        test_jobs[chat_id] = {}
    test_jobs[chat_id]['turbomatiz_template1'] = job

    current_time = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
    send_time = current_time + timedelta(seconds=10)

    await update.message.reply_text(
        f'‚úÖ –¢–µ—Å—Ç "–û–ø–ª–∞—Ç–∞ TurboMatiz" –∑–∞–ø—É—â–µ–Ω!\n'
        f'üìÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤: {send_time.strftime("%H:%M:%S")}\n'
        f'‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: 10 —Å–µ–∫—É–Ω–¥',
        reply_markup=get_test_turbomatiz_keyboard()
    )


@authorization_required
async def test_turbomatiz_template2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç TurboMatiz —à–∞–±–ª–æ–Ω 2 (–æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥)"""
    chat_id = update.effective_chat.id
    print(f"üß™ –¢–µ—Å—Ç TurboMatiz —à–∞–±–ª–æ–Ω–∞ 2 –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
    job = context.job_queue.run_once(
        lambda ctx: send_test_template_message(ctx, chat_id, "turbomatiz_template2"),
        when=10,
        chat_id=chat_id,
        name=f"test_turbomatiz_template2_{chat_id}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    if chat_id not in test_jobs:
        test_jobs[chat_id] = {}
    test_jobs[chat_id]['turbomatiz_template2'] = job

    current_time = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
    send_time = current_time + timedelta(seconds=10)

    await update.message.reply_text(
        f'‚úÖ –¢–µ—Å—Ç "–û—Å–º–æ—Ç—Ä TurboMatiz" –∑–∞–ø—É—â–µ–Ω!\n'
        f'üìÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤: {send_time.strftime("%H:%M:%S")}\n'
        f'‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: 10 —Å–µ–∫—É–Ω–¥',
        reply_markup=get_test_turbomatiz_keyboard()
    )


@authorization_required
async def test_turbomatiz_template3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç TurboMatiz —à–∞–±–ª–æ–Ω 3 (–æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥)"""
    chat_id = update.effective_chat.id
    print(f"üß™ –¢–µ—Å—Ç TurboMatiz —à–∞–±–ª–æ–Ω–∞ 3 –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
    job = context.job_queue.run_once(
        lambda ctx: send_test_template_message(ctx, chat_id, "turbomatiz_template3"),
        when=10,
        chat_id=chat_id,
        name=f"test_turbomatiz_template3_{chat_id}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    if chat_id not in test_jobs:
        test_jobs[chat_id] = {}
    test_jobs[chat_id]['turbomatiz_template3'] = job

    current_time = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
    send_time = current_time + timedelta(seconds=10)

    await update.message.reply_text(
        f'‚úÖ –¢–µ—Å—Ç "–ß–∏—Å—Ç—ã–π –∫—É–∑–æ–≤ TurboMatiz" –∑–∞–ø—É—â–µ–Ω!\n'
        f'üìÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤: {send_time.strftime("%H:%M:%S")}\n'
        f'‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: 10 —Å–µ–∫—É–Ω–¥',
        reply_markup=get_test_turbomatiz_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@authorization_required
async def handle_text(update: Update, _: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é"""
    text = update.message.text
    user_id = update.effective_user.id

    if text == "üìã –®–∞–±–ª–æ–Ω—ã":
        await update.message.reply_text(
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:",
            reply_markup=get_templates_keyboard()
        )

    elif text == "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
        await update.message.reply_text(
            "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –®–ê–ë–õ–û–ù–û–í\n\n"
            "–¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–∞–∫ –∂–µ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—ã–µ,\n"
            "–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏\n"
            "–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑",
            reply_markup=get_testing_keyboard()
        )

    elif text == "‚öôÔ∏è –ï–©–ï":
        await update.message.reply_text(
            "‚öôÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò",
            reply_markup=get_more_keyboard(user_id)
        )

    elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_keyboard()
        )

    elif text == "üöó –û—Å–º–æ—Ç—Ä—ã Hongqi":
        await update.message.reply_text(
            "üöó –£–ü–†–ê–í–õ–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ê–ú–ò HONGQI\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=get_hongqi_keyboard()
        )

    elif text == "üöô –û—Å–º–æ—Ç—Ä—ã TurboMatiz":
        await update.message.reply_text(
            "üöô –£–ü–†–ê–í–õ–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ê–ú–ò TURBOMATIZ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=get_turbomatiz_keyboard()
        )

    elif text == "üîô –ö –≤—ã–±–æ—Ä—É –±—Ä–µ–Ω–¥–∞":
        await update.message.reply_text(
            "üîô –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –±—Ä–µ–Ω–¥–∞",
            reply_markup=get_templates_keyboard()
        )

    elif text == "üöó –¢–µ—Å—Ç Hongqi":
        await update.message.reply_text(
            "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –®–ê–ë–õ–û–ù–û–í HONGQI\n\n"
            "–¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥\n"
            "–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑",
            reply_markup=get_test_hongqi_keyboard()
        )

    elif text == "üöô –¢–µ—Å—Ç TurboMatiz":
        await update.message.reply_text(
            "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –®–ê–ë–õ–û–ù–û–í TURBOMATIZ\n\n"
            "–¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥\n"
            "–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑",
            reply_markup=get_test_turbomatiz_keyboard()
        )

    elif text == "üîô –ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é":
        await update.message.reply_text(
            "üîô –í–æ–∑–≤—Ä–∞—Ç –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é",
            reply_markup=get_testing_keyboard()
        )

    elif text == "üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥":
        await status(update, _)

    elif text == "üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è":
        await now(update, _)

    elif text == "üÜî –ú–æ–π ID":
        await my_id(update, _)

    elif text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏" and is_admin(user_id):
        await user_management(update, _)

    elif text == "üîô –ù–∞–∑–∞–¥ –∫ –ï–©–ï":
        await update.message.reply_text(
            "üîô –í–æ–∑–≤—Ä–∞—Ç –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º",
            reply_markup=get_more_keyboard(user_id)
        )

    elif text == "üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é":
        await user_management(update, _)

    elif text == "üÜî –ü–æ–ª—É—á–∏—Ç—å ID":
        await my_id(update, _)

    elif text == "üìã –°–ø—Ä–∞–≤–∫–∞":
        await help_command(update, _)

    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏",
            reply_markup=get_main_keyboard() if is_authorized(user_id) else get_unauthorized_keyboard()
        )


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –Ø–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º event loop –¥–ª—è Python 3.14
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = (
    Application.builder()
    .token(BOT_TOKEN)
    .job_queue(JobQueue())
    .build()
)

    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    add_user_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è$"), add_user_start)],
        states={
            ADD_USER_ID: [MessageHandler(filters.TEXT& ~filters.COMMAND, add_user_id)],
            ADD_USER_NAME: [MessageHandler(filters.TEXT& ~filters.COMMAND, add_user_name)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("my_id", my_id))
    application.add_handler(CommandHandler("now", now))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("update_menu", update_menu))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.Regex("^üìã –®–∞–±–ª–æ–Ω—ã$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^‚öôÔ∏è –ï–©–ï$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üöó –û—Å–º–æ—Ç—Ä—ã Hongqi$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üöô –û—Å–º–æ—Ç—Ä—ã TurboMatiz$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üîô –ö –≤—ã–±–æ—Ä—É –±—Ä–µ–Ω–¥–∞$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üöó –¢–µ—Å—Ç Hongqi$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üöô –¢–µ—Å—Ç TurboMatiz$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üîô –ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üÜî –ú–æ–π ID$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥ –∫ –ï–©–ï$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üÜî –ü–æ–ª—É—á–∏—Ç—å ID$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üìã –°–ø—Ä–∞–≤–∫–∞$"), handle_text))

    # Hongqi —à–∞–±–ª–æ–Ω—ã
    application.add_handler(MessageHandler(filters.Regex("^üîç –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–π –æ—Å–º–æ—Ç—Ä –ù5$"), start_hongqi_template1))
    application.add_handler(MessageHandler(filters.Regex("^‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Å–º–æ—Ç—Ä–∞ –ù5$"), start_hongqi_template2))
    application.add_handler(MessageHandler(filters.Regex("^üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã Hongqi$"), stop_hongqi_templates))

    # TurboMatiz —à–∞–±–ª–æ–Ω—ã
    application.add_handler(MessageHandler(filters.Regex("^üí≥ –û–ø–ª–∞—Ç–∞$"), start_turbomatiz_template1))
    application.add_handler(MessageHandler(filters.Regex("^üîç –û—Å–º–æ—Ç—Ä$"), start_turbomatiz_template2))
    application.add_handler(MessageHandler(filters.Regex("^üßº –ß–∏—Å—Ç—ã–π –∫—É–∑–æ–≤$"), start_turbomatiz_template3))
    application.add_handler(MessageHandler(filters.Regex("^üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã TurboMatiz$"), stop_turbomatiz_templates))

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Hongqi
    application.add_handler(MessageHandler(filters.Regex("^üîç –¢–µ—Å—Ç –æ—Å–º–æ—Ç—Ä –ù5$"), test_hongqi_template1))
    application.add_handler(MessageHandler(filters.Regex("^‚è∞ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ù5$"), test_hongqi_template2))

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TurboMatiz
    application.add_handler(MessageHandler(filters.Regex("^üí≥ –¢–µ—Å—Ç –æ–ø–ª–∞—Ç–∞$"), test_turbomatiz_template1))
    application.add_handler(MessageHandler(filters.Regex("^üîç –¢–µ—Å—Ç –æ—Å–º–æ—Ç—Ä$"), test_turbomatiz_template2))
    application.add_handler(MessageHandler(filters.Regex("^üßº –¢–µ—Å—Ç —á–∏—Å—Ç—ã–π –∫—É–∑–æ–≤$"), test_turbomatiz_template3))

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    application.add_handler(MessageHandler(filters.Regex("^üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è$"), cancel_tests))

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    application.add_handler(add_user_conv_handler)
    application.add_handler(MessageHandler(filters.Regex("^‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è$"), remove_user_start))
    application.add_handler(MessageHandler(filters.Regex("^üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π$"), list_users))
    application.add_handler(CallbackQueryHandler(remove_user_confirm, pattern="^(confirm_remove_|cancel_remove)"))

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–Ω–æ–ø–∫–∞–º
    application.add_handler(MessageHandler(filters.Regex("^‚ùå .* \\(ID: \\d+\\)$"), remove_user_selected))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT& ~filters.COMMAND, handle_text))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()


if __name__ == '__main__':

    main()



