# -*- coding: utf-8 -*-
import logging
import asyncio
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler, JobQueue
)
from config import BOT_TOKEN
from authorized_users import is_authorized, is_admin, get_user_role
from database import init_database
from task_manager import task_manager
from group_manager import group_manager
from menu_manager import *
import datetime
import pytz
import os
import requests
import threading
import time
import json

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def reset_admin():
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã...")
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
    files_to_remove = [
        'authorized_users.json',
        'active_tasks.json', 
        'bot_groups.json',
        'user_groups.json',
        'templates.json',
        'user_roles.json'
    ]
    
    for file in files_to_remove:
        if os.path.exists(file):
            os.remove(file)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∑–∞–Ω–æ–≤–æ
    init_database()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_id = 812934047
    admin_data = {
        "users": {
            str(admin_id): {
                "name": "–ù–∏–∫–∏—Ç–∞",
                "role": "admin",
                "groups": ["all"]
            }
        },
        "admin_id": admin_id
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ authorized_users.json
    with open('authorized_users.json', 'w', encoding='utf-8') as f:
        json.dump(admin_data, f, ensure_ascii=False, indent=4)
    print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω –≤ authorized_users.json")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_roles.json
    user_roles_data = {"user_roles": {str(admin_id): "admin"}}
    with open('user_roles.json', 'w', encoding='utf-8') as f:
        json.dump(user_roles_data, f, ensure_ascii=False, indent=2)
    print("‚úÖ –†–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ user_roles.json")
    
    print("\nüéâ –°–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ID {admin_id}")
    print("üîë –†–æ–ª—å: admin")
    print("üìã –î–æ—Å—Ç—É–ø: –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —Å–±—Ä–æ—Å–æ–º
print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
reset_admin()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

def authorization_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        
        if not is_authorized(user_id):
            await update.message.reply_text(
                "‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ü–†–ê–í\n\n"
                "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @ProfeSSor471",
                reply_markup=get_guest_keyboard()
            )
            return None
        return await func(update, context, *args, **kwargs)
    return wrapper

def admin_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        
        if not is_admin(user_id):
            await update.message.reply_text(
                "‚ùå –¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê\n\n"
                "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                reply_markup=get_main_menu(user_id)
            )
            return None
        return await func(update, context, *args, **kwargs)
    return wrapper

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    # –ï—Å–ª–∏ –±–æ—Ç –≤ –≥—Ä—É–ø–ø–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if update.effective_chat.type in ["group", "supergroup", "channel"]:
        await group_manager.update_group_info(update, context)
        return
    
    # –õ–∏—á–Ω—ã–π —á–∞—Ç
    current_time = datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime("%H:%M:%S")

    if not is_authorized(user_id):
        welcome_text = (
            f'ü§ñ –ë–û–¢ –î–õ–Ø –û–¢–õ–û–ñ–ï–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô\n\n'
            f'–í–∞—à ID: `{user_id}`\n'
            f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time} (–ú–æ—Å–∫–≤–∞)\n\n'
            f'‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ü–†–ê–í\n\n'
            f'–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω–∞–∂–º–∏—Ç–µ "üÜî –ü–æ–ª—É—á–∏—Ç—å ID" –∏ —Å–æ–æ–±—â–∏—Ç–µ –µ–≥–æ @ProfeSSor471'
        )

        await update.message.reply_text(
            welcome_text,
            reply_markup=get_guest_keyboard(),
            parse_mode='Markdown'
        )
        return

    user_role = get_user_role(user_id)
    welcome_text = (
        f'ü§ñ –ë–û–¢ –î–õ–Ø –û–¢–õ–û–ñ–ï–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô\n'
        f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time} (–ú–æ—Å–∫–≤–∞)\n'
        f'–í–∞—à ID: {user_id}\n'
        f'–†–æ–ª—å: {user_role}\n\n'
        f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!'
    )

    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_menu(user_id)
    )

@authorization_required
async def handle_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ó–∞–¥–∞—á–∏"""
    user_id = update.effective_user.id
    await update.message.reply_text(
        "üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ê–ú–ò",
        reply_markup=get_tasks_menu()
    )

@authorization_required
async def handle_templates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –®–∞–±–ª–æ–Ω—ã"""
    user_id = update.effective_user.id
    user_role = get_user_role(user_id)
    
    if user_role in ["–≥–æ—Å—Ç—å", "–≤–æ–¥–∏—Ç–µ–ª—å"]:
        await update.message.reply_text(
            "‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ü–†–ê–í\n\n"
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º",
            reply_markup=get_main_menu(user_id)
        )
        return
    
    await update.message.reply_text(
        "üìÅ –£–ü–†–ê–í–õ–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ê–ú–ò",
        reply_markup=get_templates_menu()
    )

@authorization_required
@admin_required
async def handle_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    await update.message.reply_text(
        "üë• –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò",
        reply_markup=get_users_menu()
    )

@authorization_required
async def handle_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ì—Ä—É–ø–ø—ã"""
    user_id = update.effective_user.id
    user_role = get_user_role(user_id)
    
    if user_role == "–≥–æ—Å—Ç—å":
        await update.message.reply_text(
            "‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ü–†–ê–í\n\n"
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º",
            reply_markup=get_main_menu(user_id)
        )
        return
    
    await update.message.reply_text(
        "üèòÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –ì–†–£–ü–ü–ê–ú–ò",
        reply_markup=get_groups_menu(user_id)
    )

@authorization_required
async def handle_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ï—â–µ"""
    user_id = update.effective_user.id
    await update.message.reply_text(
        "‚ÑπÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò",
        reply_markup=get_more_menu(user_id)
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –≥—Ä—É–ø–ø–∞—Ö
    if update.effective_chat.type in ["group", "supergroup", "channel"]:
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üìã –ó–∞–¥–∞—á–∏":
        await handle_tasks(update, context)
    elif text == "üìÅ –®–∞–±–ª–æ–Ω—ã":
        await handle_templates(update, context)
    elif text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        await handle_users(update, context)
    elif text == "üèòÔ∏è –ì—Ä—É–ø–ø—ã":
        await handle_groups(update, context)
    elif text == "‚ÑπÔ∏è –ï—â–µ":
        await handle_more(update, context)
    elif text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu(user_id))
    elif text == "üÜî –ü–æ–ª—É—á–∏—Ç—å ID":
        await my_id(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
            reply_markup=get_main_menu(user_id) if is_authorized(user_id) else get_guest_keyboard()
        )

async def my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if is_authorized(user_id):
        user_role = get_user_role(user_id)
        reply_markup = get_main_menu(user_id)
        additional_text = f"–í–∞—à–∞ —Ä–æ–ª—å: {user_role}"
    else:
        reply_markup = get_guest_keyboard()
        additional_text = "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –°–æ–æ–±—â–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"

    await update.message.reply_text(
        f'üÜî –í–∞—à ID: `{user_id}`\n'
        f'üí¨ ID —á–∞—Ç–∞: `{chat_id}`\n\n'
        f'{additional_text}',
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    user_id = update.effective_user.id

    help_text = """
ü§ñ –°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú:

–î–û–°–¢–£–ü–ù–û –í–°–ï–ú:
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/my_id - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à ID
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @ProfeSSor471
"""

    await update.message.reply_text(
        help_text,
        reply_markup=get_main_menu(user_id) if is_authorized(user_id) else get_guest_keyboard()
    )

# Keep alive –¥–ª—è Render
def keep_alive():
    def ping():
        while True:
            try:
                render_url = os.environ.get('RENDER_EXTERNAL_URL')
                if render_url:
                    requests.get(render_url, timeout=10)
                time.sleep(300)
            except:
                time.sleep(300)
    
    threading.Thread(target=ping, daemon=True).start()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    keep_alive()

    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .job_queue(JobQueue())
        .build()
    )

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
    try:
        await task_manager.restore_tasks(application)
        print("‚úÖ –ó–∞–¥–∞—á–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("my_id", my_id))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(MessageHandler(filters.Regex("^üìã –ó–∞–¥–∞—á–∏$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üìÅ –®–∞–±–ª–æ–Ω—ã$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üèòÔ∏è –ì—Ä—É–ø–ø—ã$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^‚ÑπÔ∏è –ï—â–µ$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üÜî –ü–æ–ª—É—á–∏—Ç—å ID$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^‚ùì –ü–æ–º–æ—â—å$"), handle_text))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–∞—Ö
    application.add_handler(MessageHandler(filters.ALL, group_manager.update_group_info))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    await application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑ –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
        time.sleep(10)
        # –í–º–µ—Å—Ç–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ –ø–æ–∑–≤–æ–ª—è–µ–º Render –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
        os._exit(1)
