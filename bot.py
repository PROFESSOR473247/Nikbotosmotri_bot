import logging
import asyncio
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,¬†
    ContextTypes, ConversationHandler, CallbackQueryHandler,
    JobQueue
)
from config import BOT_TOKEN
from authorized_users import is_authorized, is_admin, add_user, remove_user, get_users_list, get_admin_id
from database import init_database, load_groups, save_groups, load_user_groups, add_user_to_group
from task_manager import task_manager
from group_manager import group_manager
import datetime
import pytz
from datetime import timedelta
import sys
import os
import requests
import threading
import time

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_database()

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å templates
if 'templates' in sys.modules:
    del sys.modules['templates']

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
TEMPLATES = {}
try:
    from templates import TEMPLATES as IMPORTED_TEMPLATES
    TEMPLATES = IMPORTED_TEMPLATES
    print("‚úÖ –®–∞–±–ª–æ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as import_error:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {import_error}")
    exit(1)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADD_USER_ID, ADD_USER_NAME = range(2)
SELECT_GROUP, SELECT_TEMPLATE = range(2, 4)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def authorization_required(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if not is_authorized(user_id):
            await update.message.reply_text(
                "‚ùå –£ –í–ê–° –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ü–†–ê–í\n\n"
                "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                reply_markup=get_unauthorized_keyboard()
            )
            print(f"üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç user_id: {user_id} –∫ —Ñ—É–Ω–∫—Ü–∏–∏: {func.__name__}")
            return None
        return await func(update, context, *args, **kwargs)
    return wrapper

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_keyboard():
    keyboard = [
        ["üìã –®–∞–±–ª–æ–Ω—ã", "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"],
        ["üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á", "‚öôÔ∏è –ï–©–ï"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_unauthorized_keyboard():
    keyboard = [
        ["üÜî –ü–æ–ª—É—á–∏—Ç—å ID"],
        ["üìã –°–ø—Ä–∞–≤–∫–∞"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_templates_keyboard():
    keyboard = [
        ["üöó Hongqi 476 group", "üöô Matiz 476 group"],
        ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_group_selection_keyboard(user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    accessible_groups = group_manager.get_accessible_groups_for_user(user_id)
    keyboard = []
   ¬†
    for group_id, group_info in accessible_groups.items():
        keyboard.append([f"üìã {group_info.get('title', f'–ì—Ä—É–ø–ø–∞ {group_id}')}"])
   ¬†
    keyboard.append(["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
   ¬†
    # –ï—Å–ª–∏ –±–æ—Ç –≤ –≥—Ä—É–ø–ø–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    if update.effective_chat.type in ["group", "supergroup", "channel"]:
        await group_manager.update_group_info(update, context)
        return
   ¬†
    # –õ–∏—á–Ω–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞
    current_time = datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime("%H:%M:%S")

    if not is_authorized(user_id):
        welcome_text = (
            f'ü§ñ –ë–û–¢ –î–õ–Ø –û–¢–õ–û–ñ–ï–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô\n\n'
            f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–≥-–≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö.\n\n'
            f'üÜî –í–∞—à ID: `{user_id}`\n'
            f'üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time} (–ú–°–ö)\n\n'
            f'‚ùå –£ –í–ê–° –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ü–†–ê–í\n\n'
            f'–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–ª—É—á–∏—Ç—å ID¬ª –∏ —Å–æ–æ–±—â–∏—Ç–µ –µ–≥–æ @ProfeSSor471. '
            f'–û–Ω –≤–Ω–µ—Å—ë—Ç –í–∞—Å –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±—ä—è—Å–Ω–∏—Ç –¥–∞–ª—å–Ω–µ–π—à—É—é —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.\n\n'
            f'–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!'
        )

        await update.message.reply_text(
            welcome_text,
            reply_markup=get_unauthorized_keyboard(),
            parse_mode='Markdown'
        )
        return

    welcome_text = (
        f'ü§ñ –ë–û–¢ –î–õ–Ø –û–¢–õ–û–ñ–ï–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô\n'
        f'üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time} (–ú–°–ö)\n'
        f'üÜî –í–∞—à ID: {user_id}\n\n'
        f'üéπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!'
    )

    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_keyboard()
    )

@authorization_required
async def handle_templates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –®–∞–±–ª–æ–Ω—ã"""
    user_id = update.effective_user.id
   ¬†
    accessible_groups = group_manager.get_accessible_groups_for_user(user_id)
    if not accessible_groups:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞",
            reply_markup=get_main_keyboard()
        )
        return
   ¬†
    await update.message.reply_text(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏:",
        reply_markup=get_group_selection_keyboard(user_id)
    )

@authorization_required¬†
async def handle_testing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    user_id = update.effective_user.id
   ¬†
    accessible_groups = group_manager.get_accessible_groups_for_user(user_id)
    if not accessible_groups:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ",
            reply_markup=get_main_keyboard()
        )
        return
   ¬†
    await update.message.reply_text(
        "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –®–ê–ë–õ–û–ù–û–í\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:",
        reply_markup=get_group_selection_keyboard(user_id)
    )

@authorization_required
async def handle_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    user_tasks = task_manager.get_user_tasks(user_id)
   ¬†
    if not user_tasks:
        status_text = "üìä –°–¢–ê–¢–£–° –ó–ê–î–ê–ß\n\n‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"
    else:
        status_text = "üìä –°–¢–ê–¢–£–° –í–ê–®–ò–• –ê–ö–¢–ò–í–ù–´–• –ó–ê–î–ê–ß:\n\n"
        for task_id, task_data in user_tasks.items():
            group_info = load_groups()["groups"].get(str(task_data["group_id"]), {})
            group_name = group_info.get('title', f'–ì—Ä—É–ø–ø–∞ {task_data["group_id"]}')
           ¬†
            status_text += f"üîπ {TEMPLATES.get(task_data['template_name'], {}).get('text', '–®–∞–±–ª–æ–Ω')[:50]}...\n"
            status_text += f"   üìç –ì—Ä—É–ø–ø–∞: {group_name}\n"
            status_text += f"   üïí –°–æ–∑–¥–∞–Ω–∞: {task_data['created_at'][:16]}\n"
            status_text += f"   üîß –¢–∏–ø: {'–û—Å–Ω–æ–≤–Ω–∞—è' if task_data['task_type'] == 'main' else '–¢–µ—Å—Ç–æ–≤–∞—è'}\n\n"
   ¬†
    await update.message.reply_text(
        status_text,
        reply_markup=get_main_keyboard()
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user_id = update.effective_user.id
   ¬†
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞
    if update.effective_chat.type in ["group", "supergroup", "channel"]:
        return
   ¬†
    if text == "üìã –®–∞–±–ª–æ–Ω—ã":
        await handle_templates(update, context)
    elif text == "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
        await handle_testing(update, context)
    elif text == "üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á":
        await handle_status(update, context)
    elif text == "‚öôÔ∏è –ï–©–ï":
        await update.message.reply_text(
            "‚öôÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò",
            reply_markup=get_more_keyboard(user_id)
        )
    elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_keyboard()
        )
    elif text == "üÜî –ü–æ–ª—É—á–∏—Ç—å ID":
        await my_id(update, context)
    elif text == "üìã –°–ø—Ä–∞–≤–∫–∞":
        await help_command(update, context)
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
            reply_markup=get_main_keyboard() if is_authorized(user_id) else get_unauthorized_keyboard()
        )

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ bot.py
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

async def my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

def get_more_keyboard(user_id):
    # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ bot.py ...

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
   ¬†
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .job_queue(JobQueue())
        .build()
    )

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    asyncio.run(task_manager.restore_tasks(application))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("my_id", my_id))
    application.add_handler(CommandHandler("now", now))
    application.add_handler(CommandHandler("status", handle_status))
    application.add_handler(CommandHandler("update_menu", update_menu))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(MessageHandler(filters.Regex("^üìã –®–∞–±–ª–æ–Ω—ã$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^‚öôÔ∏è –ï–©–ï$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üÜî –ü–æ–ª—É—á–∏—Ç—å ID$"), handle_text))
    application.add_handler(MessageHandler(filters.Regex("^üìã –°–ø—Ä–∞–≤–∫–∞$"), handle_text))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–∞—Ö
    application.add_handler(MessageHandler(filters.ALL, group_manager.update_group_info))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == '__main__':
    main()
