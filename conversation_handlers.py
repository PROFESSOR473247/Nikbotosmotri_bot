from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
from authorized_users import add_user, get_user_role, is_admin
from database import add_user_to_group, set_user_role, get_all_users, load_groups, get_user_accessible_groups
from menu_manager import get_days_keyboard, get_frequency_keyboard, get_edit_template_keyboard, get_image_options_keyboard, get_confirmation_keyboard, get_main_menu
import logging
from datetime import datetime

# States for various conversations
ADD_USER_ID, ADD_USER_NAME, ADD_USER_ROLE, ADD_USER_GROUPS = range(4)
CREATE_TEMPLATE_GROUP, CREATE_TEMPLATE_SUBGROUP, CREATE_TEMPLATE_NAME = range(4, 7)
CREATE_TEMPLATE_IMAGE, CREATE_TEMPLATE_TIME, CREATE_TEMPLATE_DAY = range(7, 10)
CREATE_TEMPLATE_FREQUENCY, CREATE_TEMPLATE_CONFIRM = range(10, 12)

async def start_add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start the process of adding a user"""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "üë• –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=ReplyKeyboardRemove()
    )
    return ADD_USER_ID

async def process_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process the user ID"""
    user_id_text = update.message.text
    
    # Validate user ID
    if not user_id_text.isdigit():
        await update.message.reply_text("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return ADD_USER_ID
    
    context.user_data['new_user_id'] = user_id_text
    
    await update.message.reply_text(
        "‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–Ω—è—Ç.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    )
    return ADD_USER_NAME

async def process_user_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process the user name"""
    user_name = update.message.text
    context.user_data['new_user_name'] = user_name
    
    # Show role selection keyboard
    keyboard = [["–ê–¥–º–∏–Ω", "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"], ["–í–æ–¥–∏—Ç–µ–ª—å", "–ì–æ—Å—Ç—å"]]
    await update.message.reply_text(
        "‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–Ω—è—Ç–æ.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return ADD_USER_ROLE

async def process_user_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process the user role"""
    user_role = update.message.text
    role_mapping = {
        "–ê–¥–º–∏–Ω": "admin",
        "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å": "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", 
        "–í–æ–¥–∏—Ç–µ–ª—å": "–≤–æ–¥–∏—Ç–µ–ª—å",
        "–ì–æ—Å—Ç—å": "–≥–æ—Å—Ç—å"
    }
    
    if user_role not in role_mapping:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:")
        return ADD_USER_ROLE
    
    context.user_data['new_user_role'] = role_mapping[user_role]
    
    # Show groups for selection
    groups_data = load_groups()
    groups_list = list(groups_data.get("groups", {}).items())
    
    if not groups_list:
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—ã.",
            reply_markup=get_main_menu(update.effective_user.id)
        )
        return ConversationHandler.END
    
    # Create groups selection message
    groups_text = "üèòÔ∏è –î–û–°–¢–£–ü–ù–´–ï –ì–†–£–ü–ü–´:\n\n"
    for i, (group_id, group_info) in enumerate(groups_list, 1):
        groups_text += f"{i}. {group_info.get('title', f'–ì—Ä—É–ø–ø–∞ {group_id}')}\n"
    
    groups_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1,3):"
    
    await update.message.reply_text(
        groups_text,
        reply_markup=ReplyKeyboardRemove()
    )
    return ADD_USER_GROUPS

async def process_user_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process the user groups"""
    groups_text = update.message.text
    
    user_id = context.user_data['new_user_id']
    user_name = context.user_data['new_user_name']
    user_role = context.user_data['new_user_role']
    
    groups_data = load_groups()
    groups_list = list(groups_data.get("groups", {}).items())
    
    selected_groups = []
    try:
        group_numbers = [int(num.strip()) for num in groups_text.split(',')]
        for num in group_numbers:
            if 1 <= num <= len(groups_list):
                group_id = groups_list[num-1][0]
                selected_groups.append(group_id)
    except:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
            reply_markup=ReplyKeyboardRemove()
        )
        return ADD_USER_GROUPS
    
    # Add the user
    success, message = add_user(user_id, user_name, user_role, selected_groups)
    
    if success:
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n{message}",
            reply_markup=get_main_menu(update.effective_user.id)
        )
    else:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message}",
            reply_markup=get_main_menu(update.effective_user.id)
        )
    
    return ConversationHandler.END

async def cancel_add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel the add user process"""
    await update.message.reply_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_menu(update.effective_user.id)
    )
    return ConversationHandler.END

# Template creation conversation
async def start_create_template(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start template creation process"""
    user_id = update.effective_user.id
    accessible_groups = get_user_accessible_groups(user_id)
    
    if not accessible_groups:
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø.",
            reply_markup=get_main_menu(user_id)
        )
        return ConversationHandler.END
    
    # Create groups selection keyboard
    keyboard = []
    for group_id, group_info in accessible_groups.items():
        keyboard.append([f"üèòÔ∏è {group_info.get('title', f'–ì—Ä—É–ø–ø–∞ {group_id}')}"])
    
    keyboard.append(["üîô –û—Ç–º–µ–Ω–∞"])
    
    await update.message.reply_text(
        "üìù –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –®–ê–ë–õ–û–ù–ê\n\n"
        "–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return CREATE_TEMPLATE_GROUP

async def process_template_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process template group selection"""
    group_text = update.message.text
    
    if group_text == "üîô –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu(update.effective_user.id)
        )
        return ConversationHandler.END
    
    user_id = update.effective_user.id
    
    # Extract group ID from selection
    accessible_groups = get_user_accessible_groups(user_id)
    selected_group = None
    
    for group_id, group_info in accessible_groups.items():
        if group_text.endswith(group_info.get('title', f'–ì—Ä—É–ø–ø–∞ {group_id}')):
            selected_group = group_id
            break
    
    if not selected_group:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return CREATE_TEMPLATE_GROUP
    
    context.user_data['template_group'] = selected_group
    context.user_data['template_group_name'] = group_text.replace("üèòÔ∏è ", "")
    
    await update.message.reply_text(
        "‚úÖ –ì—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞.\n\n"
        "–®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    return CREATE_TEMPLATE_NAME

async def process_template_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process template name"""
    template_name = update.message.text
    context.user_data['template_name'] = template_name
    
    await update.message.reply_text(
        "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
        "–®–∞–≥ 3: –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
        reply_markup=get_image_options_keyboard()
    )
    return CREATE_TEMPLATE_IMAGE

async def process_template_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process template image"""
    if update.message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        context.user_data['template_image'] = None
        await update.message.reply_text(
            "‚úÖ –®–∞–≥ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–ø—É—â–µ–Ω.\n\n"
            "–®–∞–≥ 4: –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–ß–ß:–ú–ú, –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è):",
            reply_markup=ReplyKeyboardRemove()
        )
        return CREATE_TEMPLATE_TIME
    elif update.message.text == "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        )
        return CREATE_TEMPLATE_IMAGE
    elif update.message.text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        return CREATE_TEMPLATE_NAME
    else:
        # Handle image file
        if update.message.photo:
            # For now, just acknowledge the image
            context.user_data['template_image'] = "image_received"
            await update.message.reply_text(
                "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.\n\n"
                "–®–∞–≥ 4: –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–ß–ß:–ú–ú, –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è):",
                reply_markup=ReplyKeyboardRemove()
            )
            return CREATE_TEMPLATE_TIME
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:",
                reply_markup=get_image_options_keyboard()
            )
            return CREATE_TEMPLATE_IMAGE

async def process_template_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process template time"""
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–®–∞–≥ 3: –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
            reply_markup=get_image_options_keyboard()
        )
        return CREATE_TEMPLATE_IMAGE
    
    time_text = update.message.text
    
    # Validate time format
    try:
        hours, minutes = map(int, time_text.split(':'))
        if not (0 <= hours <= 23 and 0 <= minutes <= 59):
            raise ValueError
        context.user_data['template_time'] = time_text
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú:")
        return CREATE_TEMPLATE_TIME
    
    await update.message.reply_text(
        "‚úÖ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
        "–®–∞–≥ 5: –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
        reply_markup=get_days_keyboard()
    )
    return CREATE_TEMPLATE_DAY

async def process_template_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process template day"""
    day_text = update.message.text
    valid_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    
    if day_text not in valid_days:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:")
        return CREATE_TEMPLATE_DAY
    
    if day_text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–®–∞–≥ 4: –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–ß–ß:–ú–ú, –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è):",
            reply_markup=ReplyKeyboardRemove()
        )
        return CREATE_TEMPLATE_TIME
    
    day_mapping = {"–ü–Ω": 0, "–í—Ç": 1, "–°—Ä": 2, "–ß—Ç": 3, "–ü—Ç": 4, "–°–±": 5, "–í—Å": 6}
    context.user_data['template_day'] = day_mapping[day_text]
    context.user_data['template_day_name'] = day_text
    
    await update.message.reply_text(
        "‚úÖ –î–µ–Ω—å –≤—ã–±—Ä–∞–Ω.\n\n"
        "–®–∞–≥ 6: –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:",
        reply_markup=get_frequency_keyboard()
    )
    return CREATE_TEMPLATE_FREQUENCY

async def process_template_frequency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process template frequency"""
    frequency = update.message.text
    valid_frequencies = ["2 –≤ –Ω–µ–¥–µ–ª—é", "1 –≤ –Ω–µ–¥–µ–ª—é", "2 –≤ –º–µ—Å—è—Ü", "1 –≤ –º–µ—Å—è—Ü"]
    
    if frequency not in valid_frequencies:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:")
        return CREATE_TEMPLATE_FREQUENCY
    
    if frequency == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–®–∞–≥ 5: –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
            reply_markup=get_days_keyboard()
        )
        return CREATE_TEMPLATE_DAY
    
    context.user_data['template_frequency'] = frequency
    
    # Show confirmation
    confirmation_text = (
        "üìã –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ê\n\n"
        f"üèòÔ∏è –ì—Ä—É–ø–ø–∞: {context.user_data.get('template_group_name', '–ù/–î')}\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {context.user_data.get('template_name', '–ù/–î')}\n"
        f"üïí –í—Ä–µ–º—è: {context.user_data.get('template_time', '–ù/–î')}\n"
        f"üìÖ –î–µ–Ω—å: {context.user_data.get('template_day_name', '–ù/–î')}\n"
        f"üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {frequency}\n"
        f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–î–∞' if context.user_data.get('template_image') else '–ù–µ—Ç'}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:"
    )
    
    await update.message.reply_text(
        confirmation_text,
        reply_markup=get_confirmation_keyboard()
    )
    return CREATE_TEMPLATE_CONFIRM

async def process_template_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process template confirmation"""
    choice = update.message.text
    
    if choice == "‚úÖ –î–∞":
        # Save template to database
        template_id = f"template_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        template_data = {
            "name": context.user_data.get('template_name'),
            "group": context.user_data.get('template_group'),
            "time": context.user_data.get('template_time'),
            "day": context.user_data.get('template_day'),
            "frequency": context.user_data.get('template_frequency'),
            "image": context.user_data.get('template_image'),
            "created_at": datetime.now().isoformat(),
            "created_by": update.effective_user.id
        }
        
        # Here you would save to database
        # For now, just confirm
        await update.message.reply_text(
            "‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
            reply_markup=get_main_menu(update.effective_user.id)
        )
        return ConversationHandler.END
        
    elif choice == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text(
            "–ö–∞–∫–æ–π –ø—É–Ω–∫—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=get_edit_template_keyboard()
        )
        return CREATE_TEMPLATE_CONFIRM
    elif choice == "‚ùå –ù–µ—Ç":
        await update.message.reply_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu(update.effective_user.id)
        )
        return ConversationHandler.END
    elif choice == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–®–∞–≥ 6: –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:",
            reply_markup=get_frequency_keyboard()
        )
        return CREATE_TEMPLATE_FREQUENCY
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞:",
            reply_markup=get_confirmation_keyboard()
        )
        return CREATE_TEMPLATE_CONFIRM

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel any conversation"""
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_menu(update.effective_user.id)
    )
    return ConversationHandler.END

# Conversation handler for adding users
add_user_conversation = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å$"), start_add_user)],
    states={
        ADD_USER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_user_id)],
        ADD_USER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_user_name)],
        ADD_USER_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_user_role)],
        ADD_USER_GROUPS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_user_groups)],
    },
    fallbacks=[MessageHandler(filters.Regex("^üîô"), cancel_conversation)]
)

# Conversation handler for creating templates
create_template_conversation = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π$"), start_create_template)],
    states={
        CREATE_TEMPLATE_GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_template_group)],
        CREATE_TEMPLATE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_template_name)],
        CREATE_TEMPLATE_IMAGE: [MessageHandler(filters.TEXT | filters.PHOTO, process_template_image)],
        CREATE_TEMPLATE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_template_time)],
        CREATE_TEMPLATE_DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_template_day)],
        CREATE_TEMPLATE_FREQUENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_template_frequency)],
        CREATE_TEMPLATE_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_template_confirmation)],
    },
    fallbacks=[MessageHandler(filters.Regex("^üîô"), cancel_conversation)]
)
